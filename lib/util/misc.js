const fs=require('fs'),path=require('path'),promiseSeries=(...a)=>a.reduce((a,b)=>a.then((a)=>(b='function'==typeof b?b():b,b=b.then?b:Promise.resolve(b),b.then(Array.prototype.concat.bind(a)))),Promise.resolve([])),merge=function(){const a=(b,c)=>{for(let d in b)b[d]&&b[d].constructor===Object?(c[d]=c[d]||{},c[d]=a(b[d],c[d])):c[d]=b[d];return c};return Array.from(arguments).reduce((b,c)=>a(c,b),{})},mkdirp=function(a){a=a||'';let b=path.resolve(a).split(path.sep);for(let c,d=1;d<b.length;d++)c=path.join(b.slice(0,d+1).join(path.sep)+path.sep),fs.existsSync(c)||fs.mkdirSync(c)};module.exports={mkdirp,merge,promiseSeries};